@mixin vcenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
//==========================================
@mixin ycenter {
  position: absolute;
  top: 50%;
  transform:  translate(0, -50%);
} 
//==========================================
@mixin xcenter {
  position: absolute;
  left: 50%;
  transform:  translate(-50%, 0);
}
//==========================================
//placeholder-color
@mixin placeholder-color($color) {
  &:-moz-placeholder,
  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}
//========================================== 
//before: after:
@mixin pseudo($display: block, $pos: absolute, $content: ''){
	content: $content;
	display: $display;
	position: $pos;
}
//placeholderstyles
@mixin placeholder {
  &:-ms-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
  &::placeholder {
    @content;
  }
}
//==========================================
// triangle
@mixin arr($width, $height, $bg, $direction) {
  width: 0px;
  height: 0px;
  border-style: solid;
  @if $direction == t {
    border-width: 0 $width / 2 + px $height + px $width / 2 + px;
    border-color: transparent transparent $bg transparent;
  }
  @if $direction == r {
    border-width: $height / 2 + px 0 $height / 2 + px $width + px;
    border-color: transparent transparent transparent $bg;
  }
  @if $direction == b {
    border-width: $height + px $width / 2 + px 0 $width / 2 + px;
    border-color: $bg transparent transparent transparent;
  }
  @if $direction == l {
    border-width: $height / 2 + px $width + px $height / 2 + px 0;
    border-color: transparent $bg transparent transparent;
  }
  @if $direction == tl {
    border-width: $height + px $width + px 0 0;
    border-color: $bg transparent transparent transparent;
  }
  @if $direction == tr {
    border-width: 0 $width + px $height + px 0;
    border-color: transparent $bg transparent transparent;
  }
  @if $direction == br {
    border-width: 0 0 $height + px $width + px;
    border-color: transparent transparent $bg transparent;
  }
  @if $direction == bl {
    border-width: $height + px 0 0 $width + px;
    border-color: transparent transparent transparent $bg;
  }
} 
//==========================================
//media
@mixin screen($size) {
  $desktop: "(min-width: 1024px)";
  $tablet: "(min-width: 768px) and (max-width: 1023px)";
  $mobile: "(max-width: 767px)";
  @if $size == desktop {
    @media only screen and (#{$desktop}) {
      @content;
    }
  }
  @else if $size == tablet {
    @media only screen and (#{$tablet}) {
      @content;
    }
  }
  @else if $size == mobile {
    @media only screen and (#{$mobile}) {
      @content;
    }
  }
  @else {
    @media only screen and (#{$size}) {
      @content;
    }
  }
} 
//==========================================
//another media 
$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}
//retina display
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
} 
// usage 
// .logo {
// 	background-image: url("img/logo.png");
// 		@include retina("img/logo@2x.png", 100px, 21px);
// 	} 

//========================================== 

//keyframes 
@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
			@content;
	}
	@-moz-keyframes #{$animation-name} {
			@content;
	}  
	@-ms-keyframes #{$animation-name} {
			@content;
	}
	@-o-keyframes #{$animation-name} {
			@content;
	}  
	@keyframes #{$animation-name} {
			@content;
	}
}  
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
} 

//Usage
// Define animation name, and properties
// @include keyframes(fade-out) {
//   0% { opacity: 1; }
//   90% { opacity: 0; }
// }
// Add animation to element
// .element {
//   width: 100px;
//   height: 100px;
//   background: black;
//   @include animation('fade-out 5s 3');
// }
//==========================